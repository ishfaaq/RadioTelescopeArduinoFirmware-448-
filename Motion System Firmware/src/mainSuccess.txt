#include <TMCStepper.h>
#include <AccelStepper.h>

#define EN_PIN           2 // Enable
#define DIR_PIN          3 // Direction
#define STEP_PIN         4 // Step
#define SERIAL_PORT Serial2 // TMC2208/TMC2224 HardwareSerial port
#define R_SENSE 0.11f // SilentStepStick series use 0.11
#define DRIVER_ADDRESS 0b00 // TMC2209 Driver address according to MS1 and MS2
#define STALL_VALUE     100 // [0..255]



TMC2209Stepper driver(&SERIAL_PORT, R_SENSE, DRIVER_ADDRESS); // Create TMC driver
using namespace TMC2208_n;
AccelStepper stepper = AccelStepper(stepper.DRIVER, STEP_PIN, DIR_PIN);


double steps_per_deg = (200/360)*1000;




void setup() {
    //SPI.begin();   //I think this is for SPI instead of UART. No idea what SPI is
    Serial.begin(9600);
    while(!Serial);
    Serial.println("Start...");
    pinMode(EN_PIN, OUTPUT);
    pinMode(STEP_PIN, OUTPUT);
    pinMode(DIR_PIN, OUTPUT);
    digitalWrite(EN_PIN, LOW);  
    
    SERIAL_PORT.begin(19200);
    Serial.println("serial opened...");

    driver.beginSerial(19200);
    driver.begin();
    driver.toff(4); 
    driver.rms_current(400);    // Set stepper current to 600mA. The command is the same as command TMC2130.setCurrent(600, 0.11, 0.5);
    driver.pwm_autoscale(true); // Needed for stealthChop
    driver.microsteps(0);
    //driver.TCOOLTHRS(0xFFFFF); // 20bit max
    //driver.semin(5);
    //driver.semax(2);
    //driver.sedn(0b01);
    //driver.SGTHRS(STALL_VALUE);
    Serial.println("reg values set...");

    stepper.setMaxSpeed(400); // 100 deg/sec? why the factor of 2 here?
    stepper.setAcceleration(1000); // 200 deg/s^2? look above for confusion
    stepper.setEnablePin(EN_PIN);
    stepper.setPinsInverted(false, false, true);
    stepper.enableOutputs();
    Serial.println("stepper settings done...");


}

void loop() {
    static uint32_t last_time=0;
    uint32_t ms = millis();

    if (stepper.distanceToGo() == 0) {
        stepper.disableOutputs();
        delay(300);
        stepper.move(200); // Move 100 deg
        stepper.enableOutputs();
    }
    stepper.run();

  if((ms-last_time) > 1000) { //run every 0.1s
    last_time = ms;

    Serial.print("0 ");
    Serial.print(driver.cs2rms(driver.cs_actual()), DEC);
    Serial.print(" ");
    Serial.println(driver.version());
  }
}
    
    


/*
#include <Arduino.h>
#include <TMC2209.h>

HardwareSerial & serial_stream = Serial1;

const long SERIAL_BAUD_RATE = 9600;
const long SERIAL1_BAUD_RATE_COUNT = 10;
const long SERIAL1_BAUD_RATES[SERIAL1_BAUD_RATE_COUNT] =
{
  500000,
  250000,
  115200,
  57600,
  38400,
  31250,
  28800,
  19200,
  14400,
  9600
};
const uint8_t SUCCESSIVE_OPERATION_COUNT = 3;
const int DELAY = 2000;

// Instantiate TMC2209
TMC2209 stepper_driver;
uint8_t serial1_baud_rate_index = 0;


void setup()
{
  Serial.begin(SERIAL_BAUD_RATE);
}

void loop()
{
  long serial1_baud_rate = SERIAL1_BAUD_RATES[serial1_baud_rate_index++];
  stepper_driver.setup(serial_stream,serial1_baud_rate);
  if (serial1_baud_rate_index == SERIAL1_BAUD_RATE_COUNT)
  {
    serial1_baud_rate_index = 0;
  }

  bool test_further = false;

  Serial.println("*************************");
  Serial.print("serial1_baud_rate = ");
  Serial.println(serial1_baud_rate);

  if (stepper_driver.isSetupAndCommunicating())
  {
    Serial.println("Stepper driver setup and communicating!");
    test_further = true;
  }
  else
  {
    Serial.println("Stepper driver not setup and communicating!");
  }

  if (test_further)
  {
    uint32_t microstep_sum = 0;
    for (uint8_t i=0; i<SUCCESSIVE_OPERATION_COUNT; ++i)
    {
      microstep_sum += stepper_driver.getMicrostepsPerStep();
    }
    if (microstep_sum > 0)
    {
      Serial.println("Successive read test passed!");
    }
    else
    {
      Serial.println("Successive read test failed!");
    }
    uint8_t itc_begin = stepper_driver.getInterfaceTransmissionCounter();
    for (uint8_t i=0; i<SUCCESSIVE_OPERATION_COUNT; ++i)
    {
      stepper_driver.disable();
    }
    uint8_t itc_end = stepper_driver.getInterfaceTransmissionCounter();
    if (itc_begin != itc_end)
    {
      Serial.println("Successive write test passed!");
    }
    else
    {
      Serial.println("Successive write test failed!");
    }
  }

  Serial.println("*************************");
  Serial.println("");
  delay(DELAY);
}*/